; ModuleID = 'MicroC'
source_filename = "MicroC"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"

declare i32 @printf(i8*, ...)

define i32 @tmp(i32 %a) {
entry:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  br label %while_body

while:                                            ; preds = %while_body
  %a2 = load i32, i32* %a1
  %tmp = icmp sge i32 %a2, 0
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while, %entry
  %a3 = load i32, i32* %a1
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %a3)
  %a4 = load i32, i32* %a1
  %tmp5 = sub i32 %a4, 1
  store i32 %tmp5, i32* %a1
  br label %while

while_end:                                        ; preds = %while
  ret i32 0
}

define i32 @main() {
entry:
  %a = alloca i32
  store i32 5, i32* %a
  %a1 = load i32, i32* %a
  %tmp = add i32 %a1, 1
  store i32 %tmp, i32* %a
  %a2 = load i32, i32* %a
  %tmp_result = call i32 @tmp(i32 %a2)
  ret i32 0
}
