; ModuleID = 'MicroC'
source_filename = "MicroC"

@a = global i32 0
@b = global i32 0
@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00"

declare i32 @printf(i8*, ...)

define i32 @gcd(i32 %a, i32 %b) {
entry:
  %a1 = alloca i32
  store i32 %a, i32* %a1
  %b2 = alloca i32
  store i32 %b, i32* %b2
  br label %while

while:                                            ; preds = %if_end, %entry
  %a3 = load i32, i32* %a1
  %b4 = load i32, i32* %b2
  %tmp = icmp ne i32 %a3, %b4
  br i1 %tmp, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %b5 = load i32, i32* %b2
  %a6 = load i32, i32* %a1
  %tmp7 = icmp slt i32 %b5, %a6
  br i1 %tmp7, label %then, label %else

then:                                             ; preds = %while_body
  %a8 = load i32, i32* %a1
  %b9 = load i32, i32* %b2
  %tmp10 = sub i32 %a8, %b9
  store i32 %tmp10, i32* %a1
  br label %if_end

else:                                             ; preds = %while_body
  %b11 = load i32, i32* %b2
  %a12 = load i32, i32* %a1
  %tmp13 = sub i32 %b11, %a12
  store i32 %tmp13, i32* %b2
  br label %if_end

if_end:                                           ; preds = %else, %then
  br label %while

while_end:                                        ; preds = %while
  %a14 = load i32, i32* %a1
  ret i32 %a14
}

define i32 @main() {
entry:
  %x = alloca i32
  %y = alloca i32
  %i = alloca i32
  %d = alloca i1
  store i1 true, i1* %d
  %d1 = load i1, i1* %d
  %tmp = xor i1 %d1, true
  br i1 %tmp, label %then, label %else

then:                                             ; preds = %entry
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 4)
  br label %if_end

else:                                             ; preds = %entry
  %printf2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 5)
  br label %if_end

if_end:                                           ; preds = %else, %then
  store i32 18, i32* @a
  store i32 9, i32* @b
  store i32 2, i32* %x
  store i32 14, i32* %y
  %y3 = load i32, i32* %y
  %x4 = load i32, i32* %x
  %gcd_result = call i32 @gcd(i32 %x4, i32 %y3)
  %printf5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %gcd_result)
  %gcd_result6 = call i32 @gcd(i32 3, i32 15)
  %printf7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %gcd_result6)
  %gcd_result8 = call i32 @gcd(i32 99, i32 121)
  %printf9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %gcd_result8)
  %b = load i32, i32* @b
  %a = load i32, i32* @a
  %gcd_result10 = call i32 @gcd(i32 %a, i32 %b)
  %printf11 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %gcd_result10)
  store i32 0, i32* %i
  %i12 = load i32, i32* %i
  %tmp13 = add i32 %i12, 4
  store i32 %tmp13, i32* %i
  %i14 = load i32, i32* %i
  %tmp15 = icmp sle i32 %i14, 4
  br i1 %tmp15, label %then16, label %else18

then16:                                           ; preds = %if_end
  %printf17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 4)
  br label %if_end20

else18:                                           ; preds = %if_end
  %printf19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 5)
  br label %if_end20

if_end20:                                         ; preds = %else18, %then16
  store i32 0, i32* %i
  br label %while

while:                                            ; preds = %while_body, %if_end20
  %i21 = load i32, i32* %i
  %tmp22 = icmp slt i32 %i21, 4
  br i1 %tmp22, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %i23 = load i32, i32* %i
  %printf24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %i23)
  %i25 = load i32, i32* %i
  %tmp26 = add i32 %i25, 1
  store i32 %tmp26, i32* %i
  br label %while

while_end:                                        ; preds = %while
  ret i32 0
}
