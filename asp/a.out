; ModuleID = 'ASP'
source_filename = "ASP"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.4 = private unnamed_addr constant [4 x i8] c"%f\0A\00"
@fmt.5 = private unnamed_addr constant [4 x i8] c"%s\0A\00"

declare i32 @printf(i8*, ...)

define i32 @fib(i32 %n) {
entry:
  %n1 = alloca i32
  store i32 %n, i32* %n1
  %n2 = load i32, i32* %n1
  %tmp = icmp sle i32 %n2, 1
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %else
  %n4 = load i32, i32* %n1
  %tmp5 = sub i32 %n4, 1
  %fib_result = call i32 @fib(i32 %tmp5)
  %n6 = load i32, i32* %n1
  %tmp7 = sub i32 %n6, 2
  %fib_result8 = call i32 @fib(i32 %tmp7)
  %tmp9 = add i32 %fib_result, %fib_result8
  ret i32 %tmp9

then:                                             ; preds = %entry
  %n3 = load i32, i32* %n1
  ret i32 %n3

else:                                             ; preds = %entry
  br label %merge
}

define i32 @main() {
entry:
  %n = alloca i32
  %f = alloca i32
  %sum = alloca i32
  %cont = alloca i1
  store i32 0, i32* %n
  store i32 0, i32* %sum
  store i1 true, i1* %cont
  br label %while

while:                                            ; preds = %merge, %entry
  %cont1 = load i1, i1* %cont
  br i1 %cont1, label %while_body, label %while_end

while_body:                                       ; preds = %while
  %n2 = load i32, i32* %n
  %fib_result = call i32 @fib(i32 %n2)
  store i32 %fib_result, i32* %f
  %f3 = load i32, i32* %f
  %tmp = icmp sgt i32 %f3, 90
  br i1 %tmp, label %then, label %else

merge:                                            ; preds = %merge7, %then
  %n13 = load i32, i32* %n
  %tmp14 = add i32 %n13, 1
  store i32 %tmp14, i32* %n
  br label %while

then:                                             ; preds = %while_body
  store i1 false, i1* %cont
  br label %merge

else:                                             ; preds = %while_body
  %f4 = load i32, i32* %f
  %tmp5 = srem i32 %f4, 2
  %tmp6 = icmp eq i32 %tmp5, 0
  br i1 %tmp6, label %then8, label %else12

merge7:                                           ; preds = %else12, %then8
  br label %merge

then8:                                            ; preds = %else
  %sum9 = load i32, i32* %sum
  %f10 = load i32, i32* %f
  %tmp11 = add i32 %sum9, %f10
  store i32 %tmp11, i32* %sum
  br label %merge7

else12:                                           ; preds = %else
  br label %merge7

while_end:                                        ; preds = %while
  %sum15 = load i32, i32* %sum
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), i32 %sum15)
  ret i32 0
}
