; ModuleID = 'ASP'
source_filename = "ASP"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00"
@fmt.1 = private unnamed_addr constant [4 x i8] c"%f\0A\00"
@fmt.2 = private unnamed_addr constant [4 x i8] c"%s\0A\00"
@str = private unnamed_addr constant [7 x i8] c"\22sum:\22\00"

declare i32 @printf(i8*, ...)

define i32 @main() {
entry:
  %sum1 = alloca i32
  %sum2 = alloca i32
  %correct = alloca i32
  %num = alloca i32
  %j = alloca i32
  %k = alloca i32
  store i32 0, i32* %sum1
  store i32 0, i32* %sum2
  store i32 0, i32* %correct
  store i32 1, i32* %num
  br label %while

while:                                            ; preds = %merge41, %entry
  %num1 = load i32, i32* %num
  %tmp = icmp slt i32 %num1, 10000
  br i1 %tmp, label %while_body, label %while_end50

while_body:                                       ; preds = %while
  store i32 1, i32* %j
  br label %while2

while2:                                           ; preds = %merge, %while_body
  %j3 = load i32, i32* %j
  %num4 = load i32, i32* %num
  %tmp5 = icmp slt i32 %j3, %num4
  br i1 %tmp5, label %while_body6, label %while_end

while_body6:                                      ; preds = %while2
  %num7 = load i32, i32* %num
  %j8 = load i32, i32* %j
  %tmp9 = srem i32 %num7, %j8
  %tmp10 = icmp eq i32 %tmp9, 0
  br i1 %tmp10, label %then, label %else

merge:                                            ; preds = %else, %then
  %j14 = load i32, i32* %j
  %tmp15 = add i32 %j14, 1
  store i32 %tmp15, i32* %j
  br label %while2

then:                                             ; preds = %while_body6
  %sum111 = load i32, i32* %sum1
  %j12 = load i32, i32* %j
  %tmp13 = add i32 %sum111, %j12
  store i32 %tmp13, i32* %sum1
  br label %merge

else:                                             ; preds = %while_body6
  br label %merge

while_end:                                        ; preds = %while2
  store i32 1, i32* %k
  br label %while16

while16:                                          ; preds = %merge25, %while_end
  %k17 = load i32, i32* %k
  %sum118 = load i32, i32* %sum1
  %tmp19 = icmp slt i32 %k17, %sum118
  br i1 %tmp19, label %while_body20, label %while_end33

while_body20:                                     ; preds = %while16
  %sum121 = load i32, i32* %sum1
  %k22 = load i32, i32* %k
  %tmp23 = srem i32 %sum121, %k22
  %tmp24 = icmp eq i32 %tmp23, 0
  br i1 %tmp24, label %then26, label %else30

merge25:                                          ; preds = %else30, %then26
  %k31 = load i32, i32* %k
  %tmp32 = add i32 %k31, 1
  store i32 %tmp32, i32* %k
  br label %while16

then26:                                           ; preds = %while_body20
  %sum227 = load i32, i32* %sum2
  %k28 = load i32, i32* %k
  %tmp29 = add i32 %sum227, %k28
  store i32 %tmp29, i32* %sum2
  br label %merge25

else30:                                           ; preds = %while_body20
  br label %merge25

while_end33:                                      ; preds = %while16
  %num34 = load i32, i32* %num
  %sum235 = load i32, i32* %sum2
  %tmp36 = icmp eq i32 %num34, %sum235
  %sum137 = load i32, i32* %sum1
  %num38 = load i32, i32* %num
  %tmp39 = icmp ne i32 %sum137, %num38
  %tmp40 = and i1 %tmp36, %tmp39
  br i1 %tmp40, label %then42, label %else47

merge41:                                          ; preds = %else47, %then42
  store i32 0, i32* %sum1
  store i32 0, i32* %sum2
  %num48 = load i32, i32* %num
  %tmp49 = add i32 %num48, 1
  store i32 %tmp49, i32* %num
  br label %while

then42:                                           ; preds = %while_end33
  %correct43 = load i32, i32* %correct
  %num44 = load i32, i32* %num
  %tmp45 = add i32 %correct43, %num44
  store i32 %tmp45, i32* %correct
  %num46 = load i32, i32* %num
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %num46)
  br label %merge41

else47:                                           ; preds = %while_end33
  br label %merge41

while_end50:                                      ; preds = %while
  %printf51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i8* getelementptr inbounds ([7 x i8], [7 x i8]* @str, i32 0, i32 0))
  %correct52 = load i32, i32* %correct
  %printf53 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %correct52)
  ret i32 0
}
